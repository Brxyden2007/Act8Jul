						ACTIVIDAD MySQL
						
----------------------------------------- TRIGGERS ------------------------------------

----------------------------------------------------------------------------------------
					Actividad 1
----------------------------------------------------------------------------------------
					
## **游댳 Caso 1: Control de Stock de Productos**

### **Escenario:**

Una tienda en l칤nea necesita asegurarse de que los clientes no puedan comprar m치s unidades de un producto del stock disponible. Si intentan hacerlo, la compra debe **bloquearse**.

### **Tarea:**

1. Crear las tablas `productos` y `ventas`.
2. Implementar un trigger `BEFORE INSERT` para evitar ventas con cantidad mayor al stock disponible.
3. Probar el trigger.

----------------------------------------------------------------------------------------------------
Creacion Tablas:
----------------------------------------------------------------------------------------------------

CREATE TABLE productos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50),
    stock INT
);

CREATE TABLE ventas (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_producto INT,
    cantidad INT,
    FOREIGN KEY (id_producto) REFERENCES productos(id)
);

----------------------------------------------------------------------------------------------------

SOLUCION:

DELIMITER //

CREATE TRIGGER before_venta_insert
BEFORE INSERT ON ventas
FOR EACH ROW
BEGIN
	DECLARE stock_actual INT;
	
	SELECT stock INTO stock_actual
	FROM productos
	WHERE id = NEW.id_producto;
	
	IF NEW.cantidad > stock_actual THEN
	SIGNAL SQLSTATE '69696'
	SET MESSAGE_TEXT = 'La cantidad del producto no puede ser mayor al stock';
	END IF;
END //
DELIMITER ;

------------------------------------------------------------------------------

Probar Trigger:

INSERT INTO productos (id, nombre, stock)
VALUES (1, 'PC Gamer', 20);

INSERT INTO ventas (id, id_producto, cantidad)
VALUES (1, 1, 15);

INSERT INTO ventas (id, id_producto, cantidad)
VALUES (2, 1, 25);


---------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------
					Actividad 2
----------------------------------------------------------------------------------------

### **Escenario:**

La empresa **TechCorp** desea mantener un registro hist칩rico de todos los cambios de salario de sus empleados.

### **Tarea:**

1. Crear las tablas `empleados` y `historial_salarios`.
2. Implementar un trigger `BEFORE UPDATE` que registre cualquier cambio en el salario.
3. Probar el trigger.

----------------------------------------------------------------------------------------
Tablas:

CREATE TABLE empleados (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50),
    salario DECIMAL(10,2)
);

CREATE TABLE historial_salarios (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_empleado INT,
    salario_anterior DECIMAL(10,2),
    salario_nuevo DECIMAL(10,2),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_empleado) REFERENCES empleados(id)
);

------------------------------------------------------------------------------------------

Solucion:

DELIMITER //

CREATE TRIGGER before_update_salario
BEFORE UPDATE ON empleados
FOR EACH ROW
BEGIN
	IF NEW.salario <> OLD.salario THEN
	INSERT INTO historial_salarios(
	id_empleado, salario_anterior, salario_nuevo)
	VALUES (OLD. id, OLD.salario, NEW.salario);
	END IF;
END //

DELIMITER ;

------------------------------------------------------------------------------
+
Prueba de trigger:

INSERT INTO empleados (nombre, salario)
VALUES ('Jhinet Perez', 1600.00);

UPDATE empleados
SET salario = 1800.00
WHERE id = 1;

SELECT id, id_empleado, salario_anterior, salario_nuevo, fecha FROM historial_salarios;



----------------------------------------------------------------------------------------
					Actividad 3
----------------------------------------------------------------------------------------

### **Escenario:**

La empresa **DataSecure** quiere registrar toda eliminaci칩n de clientes en una tabla de auditor칤a para evitar p칠rdidas accidentales de datos.

### **Tarea:**

1. Crear las tablas `clientes` y `clientes_auditoria`.
2. Implementar un trigger `AFTER DELETE` para registrar los clientes eliminados.
3. Probar el trigger.

--------------------------------------------------------------------------------------
Creacion tablas:

CREATE TABLE clientes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50),
    email VARCHAR(50)
);

CREATE TABLE clientes_auditoria (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_cliente INT,
    nombre VARCHAR(50),
    email VARCHAR(50),
    fecha_eliminacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

---------------------------------------------------------------------------------------

Solucion:

DELIMITER //

CREATE TRIGGER after_delete_cliente
AFTER DELETE ON clientes
FOR EACH ROW
BEGIN
INSERT INTO clientes_auditoria(id_cliente, nombre, email) VALUES (OLD.id, OLD.nombre, OLD.email);
END //

DELIMITER ;

------------------------------------------------------------------------------

Probar Trigger: 

INSERT INTO clientes (nombre, email)
VALUES ('Juan Romero', 'juanromerocepeda@example.com');

INSERT INTO clientes (nombre, email)
VALUES ('Darwin Arenas', 'darwinarenas@example.com');

DELETE FROM clientes WHERE id = 1;

-----------------------------------------------------------------------------------------



SELECT id, id_cliente, nombre, email, fecha_eliminacion FROM clientes_auditoria;

--------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------
					Actividad 4
----------------------------------------------------------------------------------------

### **Escenario:**

En un sistema de ventas, no se debe permitir eliminar pedidos que a칰n est치n **pendientes**.

### **Tarea:**

1. Crear las tablas `pedidos`.
2. Implementar un trigger `BEFORE DELETE` para evitar la eliminaci칩n de pedidos pendientes.
3. Probar el trigger.

-------------------------------------------------------------------------------------------

Tablas:

CREATE TABLE pedidos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cliente VARCHAR(100),
    estado ENUM('pendiente', 'completado')
);

-------------------------------------------------------------------------------------------

Solucion:

DELIMITER //

CREATE TRIGGER before_delete_pedido
BEFORE DELETE ON pedidos
FOR EACH ROW
BEGIN
IF OLD.estado = 'pendiente' THEN
SIGNAL SQLSTATE '69696'
SET MESSAGE_TEXT = 'No se puede eliminar un pedido que esta pendiente, porfavor, vuelva a intentarlo.';
END IF;
END //

DELIMITER ;

------------------------------------------------------------------------------

Probar triggers:

INSERT INTO pedidos (cliente, estado)
VALUES 
('Brayden', 'pendiente'),
('Sharon', 'completado');

DELETE FROM pedidos WHERE id = 1;

DELETE FROM pedidos WHERE id = 2;

------------------------------------------------------------------------------------------------------



